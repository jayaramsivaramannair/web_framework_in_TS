{"version":3,"sources":["src/models/User.ts","src/index.ts"],"names":[],"mappings":";;;;;;ACAA,IAAA,MAAA,GAAA,OAAA,CAAA,eAAA,CAAA;ADWA,IAAA,IAAA,GAAA,YAAA;ACTA,ADaE,ICbI,IAAI,GAAG,IAAI,MAAA,CAAA,IAAJ,CAAS;AAAC,ADcrB,ECdqB,IAAI,EAAE,GDc3B,IAAA,CCdoB,ADcA,IAApB,EAAmC;ACdE,ADcjB,ECdiB,GAAG,EAAE,EDctB,IAAA,GAAA,IAAA,CAAe,CAJnC;ACVoB,CAAT,CAAb;AAEA,ADSE,ICTE,CAAC,EAAL,CAAQ,CDSN,MAAA,CCTF,EAAkB,ADSsB,EAAtC,UCTgB;AAChB,ADWuC,ECXvC,OAAO,CAAC,GAAR,CAAY,YAAZ;AACD,CAFD;AAGA,ADWE,EAAA,ECXE,CAAC,CDWH,CCXF,ADWE,CCXM,QAAR,ADWE,CAAA,CCXgB,EDWhB,GAAA,OCXgB,GDWZ,QAAJ,EAAoB;ACVpB,ADWE,ECXF,OAAO,CAAC,CDWC,ECXT,CAAY,EDWE,IAAL,CAAU,KCXnB,GDWS,CAAP;ACVH,ADWE,CCbH,EDWE;ACRF,IAAI,CAAC,EAAL,CAAQ,MAAR,EAAgB,YAAA;AACd,ADWA,ECXA,ADWA,IAAA,CAAA,ECXO,CAAC,GAAR,CAAY,EDWZ,CAAA,GAAA,GAAA,UAAI,CCXJ,KDWA,EAAqB;ACVtB,ADWG,CCbJ;AAKA,ADSI,ICTA,CAAC,OAAL,CAAa,QAAb;AACA,ADSI,ICTA,ADSA,CCTC,KDSK,CAAC,CCTX,CAAa,IDST,CAAc,CCTlB,IDSuB,IAAnB,EAAyB,MAAzB;AACD,GAJD,CAXF,CAiBE;;;AACA,EAAA,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAG,SAAH,EAAsB,QAAtB,EAAwC;AACtC;AACA,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,KAA0B,EAA3C;AACA,IAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACA,SAAK,MAAL,CAAY,SAAZ,IAAyB,QAAzB;AAED,GAND;;AASA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,SAAR,EAAyB;AACvB,QAAM,QAAQ,GAAG,KAAK,MAAL,CAAY,SAAZ,CAAjB,CADuB,CAGvB;;AACA,QAAG,CAAC,QAAD,IAAa,QAAQ,CAAC,MAAT,IAAmB,CAAnC,EAAsC;AACpC;AACD,KANsB,CAQvB;;;AACA,IAAA,QAAQ,CAAC,OAAT,CAAiB,UAAA,QAAA,EAAQ;AACvB,MAAA,QAAQ;AACT,KAFD;AAGD,GAZD;;AAaF,SAAA,IAAA;AAxCA,CAAA,EAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["//Interface is used to define types\ninterface UserProps {\n  //name and age property in this interface are made optional with use of a '?'\n  name?: string;\n  age?: number;\n}\n\n\n//type alias - a callback function which takes no arguments and returns void\ntype Callback = () => void;\n\nexport class User {\n  //events property will be an object with a string as its key and its associated value to be an array of callback functions\n  events: {[key: string]: Callback[]} = {};\n\n  //data property is made private so that it cannot be accessed outside the class\n  constructor(private data: UserProps) {}\n\n  get(propName: string): (string | number) {\n    return this.data[propName]\n  }\n\n  set(update: UserProps) : void {\n    //Object.assign takes the first parameter which is the current object property on the User class\n    // It replaces the first parameter with an object property in the second parameter\n    Object.assign(this.data, update);\n  }\n\n  //In this case, second parameter is a callback (defined by type alias above) which takes no parameters and returns nothing\n  on(eventName: string, callback: Callback): void {\n    //handlers will be either an array of callback functions or an empty array\n    const handlers = this.events[eventName] || [];\n    handlers.push(callback);\n    this.events[eventName] = handlers;\n\n  }\n\n\n  trigger(eventName: string) : void {\n    const handlers = this.events[eventName];\n\n    //check if handlers are associated with an event or not\n    if(!handlers || handlers.length == 0) {\n      return;\n    }\n\n    //loop through each handler in the array and invoke it\n    handlers.forEach(callback => {\n      callback();\n    })\n  }\n}","import {User} from './models/User';\n\nconst user = new User({name: 'myname', age: 20});\n\nuser.on('change', () => {\n  console.log('Change # 1');\n});\nuser.on('change', () => {\n  console.log('Change # 2');\n});\nuser.on('save', () => {\n  console.log('Save was triggered');\n});\n\n\nuser.trigger('change');\nuser.trigger('save');"]}